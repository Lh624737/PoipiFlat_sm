package com.pospi.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pospi.dto.GoodsDto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_DTO".
*/
public class GoodsDtoDao extends AbstractDao<GoodsDto, Long> {

    public static final String TABLENAME = "GOODS_DTO";

    /**
     * Properties of entity GoodsDto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, String.class, "Sid", false, "SID");
        public final static Property UId = new Property(2, String.class, "UId", false, "UID");
        public final static Property Category_sid = new Property(3, String.class, "category_sid", false, "CATEGORY_SID");
        public final static Property ColorCode = new Property(4, String.class, "colorCode", false, "COLOR_CODE");
        public final static Property Group_sid = new Property(5, String.class, "group_sid", false, "GROUP_SID");
        public final static Property Image = new Property(6, String.class, "image", false, "IMAGE");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Price = new Property(8, double.class, "price", false, "PRICE");
        public final static Property CostPrice = new Property(9, double.class, "CostPrice", false, "COST_PRICE");
        public final static Property Unit = new Property(10, String.class, "unit", false, "UNIT");
        public final static Property MainPrinterSid = new Property(11, String.class, "mainPrinterSid", false, "MAIN_PRINTER_SID");
        public final static Property BackPrinterSid = new Property(12, String.class, "backPrinterSid", false, "BACK_PRINTER_SID");
        public final static Property Code = new Property(13, String.class, "Code", false, "CODE");
        public final static Property CreateTime = new Property(14, String.class, "createTime", false, "CREATE_TIME");
        public final static Property OrderBy = new Property(15, int.class, "orderBy", false, "ORDER_BY");
        public final static Property IsHide = new Property(16, boolean.class, "isHide", false, "IS_HIDE");
        public final static Property ColorCodeShow = new Property(17, String.class, "colorCodeShow", false, "COLOR_CODE_SHOW");
    }


    public GoodsDtoDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDtoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_DTO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SID\" TEXT," + // 1: Sid
                "\"UID\" TEXT," + // 2: UId
                "\"CATEGORY_SID\" TEXT," + // 3: category_sid
                "\"COLOR_CODE\" TEXT," + // 4: colorCode
                "\"GROUP_SID\" TEXT," + // 5: group_sid
                "\"IMAGE\" TEXT," + // 6: image
                "\"NAME\" TEXT," + // 7: name
                "\"PRICE\" REAL NOT NULL ," + // 8: price
                "\"COST_PRICE\" REAL NOT NULL ," + // 9: CostPrice
                "\"UNIT\" TEXT," + // 10: unit
                "\"MAIN_PRINTER_SID\" TEXT," + // 11: mainPrinterSid
                "\"BACK_PRINTER_SID\" TEXT," + // 12: backPrinterSid
                "\"CODE\" TEXT," + // 13: Code
                "\"CREATE_TIME\" TEXT," + // 14: createTime
                "\"ORDER_BY\" INTEGER NOT NULL ," + // 15: orderBy
                "\"IS_HIDE\" INTEGER NOT NULL ," + // 16: isHide
                "\"COLOR_CODE_SHOW\" TEXT);"); // 17: colorCodeShow
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_DTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsDto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Sid = entity.getSid();
        if (Sid != null) {
            stmt.bindString(2, Sid);
        }
 
        String UId = entity.getUId();
        if (UId != null) {
            stmt.bindString(3, UId);
        }
 
        String category_sid = entity.getCategory_sid();
        if (category_sid != null) {
            stmt.bindString(4, category_sid);
        }
 
        String colorCode = entity.getColorCode();
        if (colorCode != null) {
            stmt.bindString(5, colorCode);
        }
 
        String group_sid = entity.getGroup_sid();
        if (group_sid != null) {
            stmt.bindString(6, group_sid);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
        stmt.bindDouble(9, entity.getPrice());
        stmt.bindDouble(10, entity.getCostPrice());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(11, unit);
        }
 
        String mainPrinterSid = entity.getMainPrinterSid();
        if (mainPrinterSid != null) {
            stmt.bindString(12, mainPrinterSid);
        }
 
        String backPrinterSid = entity.getBackPrinterSid();
        if (backPrinterSid != null) {
            stmt.bindString(13, backPrinterSid);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(14, Code);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(15, createTime);
        }
        stmt.bindLong(16, entity.getOrderBy());
        stmt.bindLong(17, entity.getIsHide() ? 1L: 0L);
 
        String colorCodeShow = entity.getColorCodeShow();
        if (colorCodeShow != null) {
            stmt.bindString(18, colorCodeShow);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsDto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Sid = entity.getSid();
        if (Sid != null) {
            stmt.bindString(2, Sid);
        }
 
        String UId = entity.getUId();
        if (UId != null) {
            stmt.bindString(3, UId);
        }
 
        String category_sid = entity.getCategory_sid();
        if (category_sid != null) {
            stmt.bindString(4, category_sid);
        }
 
        String colorCode = entity.getColorCode();
        if (colorCode != null) {
            stmt.bindString(5, colorCode);
        }
 
        String group_sid = entity.getGroup_sid();
        if (group_sid != null) {
            stmt.bindString(6, group_sid);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(7, image);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
        stmt.bindDouble(9, entity.getPrice());
        stmt.bindDouble(10, entity.getCostPrice());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(11, unit);
        }
 
        String mainPrinterSid = entity.getMainPrinterSid();
        if (mainPrinterSid != null) {
            stmt.bindString(12, mainPrinterSid);
        }
 
        String backPrinterSid = entity.getBackPrinterSid();
        if (backPrinterSid != null) {
            stmt.bindString(13, backPrinterSid);
        }
 
        String Code = entity.getCode();
        if (Code != null) {
            stmt.bindString(14, Code);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(15, createTime);
        }
        stmt.bindLong(16, entity.getOrderBy());
        stmt.bindLong(17, entity.getIsHide() ? 1L: 0L);
 
        String colorCodeShow = entity.getColorCodeShow();
        if (colorCodeShow != null) {
            stmt.bindString(18, colorCodeShow);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsDto readEntity(Cursor cursor, int offset) {
        GoodsDto entity = new GoodsDto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category_sid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // colorCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // group_sid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.getDouble(offset + 8), // price
            cursor.getDouble(offset + 9), // CostPrice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // unit
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mainPrinterSid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // backPrinterSid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Code
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // createTime
            cursor.getInt(offset + 15), // orderBy
            cursor.getShort(offset + 16) != 0, // isHide
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // colorCodeShow
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsDto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory_sid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setColorCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroup_sid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrice(cursor.getDouble(offset + 8));
        entity.setCostPrice(cursor.getDouble(offset + 9));
        entity.setUnit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMainPrinterSid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBackPrinterSid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreateTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOrderBy(cursor.getInt(offset + 15));
        entity.setIsHide(cursor.getShort(offset + 16) != 0);
        entity.setColorCodeShow(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsDto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsDto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsDto entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
